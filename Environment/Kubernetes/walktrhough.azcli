# Definie some variables 
$UNIQUEPREFIX = Get-Random -Maximum 9999 
$LOCATION = "westeurope"
$RESSOURCE_GROUP = "Lab_RateMyBeer"
$CONTAINERREGISTRY_NAME = "RateMyBeerContainers" + $UNIQUEPREFIX
$CLUSTER_NAME="RateMyBeerCluster" + $UNIQUEPREFIX
$RESSOURCE_GROUP_INFRASTRUCTURE = "MC_" + $RESSOURCE_GROUP + "_" + $CLUSTER_NAME + "_" + $LOCATION
$SUBSCRIPTION_NAME = "Visual Studio Enterprise" # Change the name of the subscription according to your needs
$DNS_LABEL = "ratemybeer" + $UNIQUEPREFIX

# Login to the appropriate Azure Subscription
az login
az account set --subscription $SUBSCRIPTION_NAME 

# Create resource group for all ressources to make deleting everything easier
az group create `
    --name $RESSOURCE_GROUP `
    --location $LOCATION

# Create Azure Container Registry
az acr create `
    --name $CONTAINERREGISTRY_NAME `
    --resource-group $RESSOURCE_GROUP `
    --location $LOCATION `
    --sku Basic

# Create the Kubernetes Cluster
az aks create `
    --resource-group $RESSOURCE_GROUP `
    --name $CLUSTER_NAME `
    --node-count 3 `
    --node-vm-size Standard_B2s `
    --enable-managed-identity `
    --network-plugin kubenet `
    --attach-acr $CONTAINERREGISTRY_NAME #`
    # --generate-ssh-keys # Only needed the first time

# Login to the cluster and add credentials to kubeconfig
az aks get-credentials -g $RESSOURCE_GROUP -n $CLUSTER_NAME

# Configure Ingress (https://docs.microsoft.com/en-us/azure/aks/ingress-internal-ip#create-an-ingress-controller) 
## Kuberntes Ingress controlser
## https://github.com/kubernetes/ingress-nginx

kubectl create namespace ingress-nginx
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm show chart ingress-nginx/ingress-nginx # appVersion 0.47.0, version 3.33.0
helm install nginx-ingress ingress-nginx/ingress-nginx `
    --namespace ingress-nginx `
    --set controller.replicaCount=3 `
    --set controller.nodeSelector."kubernetes\.io/os"=linux `
    --set defaultBackend.nodeSelector."kubernetes\.io/os"=linux `
    --set controller.admissionWebhooks.patch.nodeSelector."kubernetes\.io/os"=linux

# Im Azure-Portal in der MC_ Ressource Gruppe nach der Ã¶ffentlichen IP des Ingress-Controller suchen
# unter Konfiguration einen DNS-Namen vergeben <meinname>.westeurope.cloudapp.azure.com
$INGRESS_IP_NAME=$(az network public-ip list -g  $RESSOURCE_GROUP_INFRASTRUCTURE  --query "[?tags.service=='ingress-nginx/nginx-ingress-ingress-nginx-controller'].name | [0]")  
az network public-ip update -g $RESSOURCE_GROUP_INFRASTRUCTURE -n $INGRESS_IP_NAME --dns-name $DNS_LABEL

# Cert-Manager 
kubectl create namespace cert-manager
helm repo add cert-manager https://charts.jetstack.io
helm repo update
helm show chart cert-manager/cert-manager 
helm install cert-manager cert-manager/cert-manager --version 1.4.0 `
    --namespace cert-manager `
    --set installCRDs=true 


# Create and Push docker images - make sure to be in the soltuion directory

az acr login --name $CONTAINERREGISTRY_NAME

.\Lab.RateMyBeer.Checkins\build.bat
.\Lab.RateMyBeer.Frontend\build.bat
.\Lab.RateMyBeer.Frontend.Api\build.bat

kubectl create namespace ratemybeer
kubectl config set-context --current --namespace=ratemybeer

# Basics
kubectl apply -f .\Kubernetes\Cluster\storageclass-managed-standard.yaml
kubectl apply -f .\Kubernetes\Infrastructure\CertManager\base\letsencrypt-staging-http-issuer.yaml
kubectl apply -f .\Kubernetes\Infrastructure\CertManager\base\letsencrypt-prod-http-issuer.yaml
kubectl apply -f .\Kubernetes\Infrastructure\Ingress\base\configmap-ingress-nginx-headers.yaml

# SQL Server
kubectl apply -f .\Kubernetes\Infrastructure\SqlServer\base\pvc-mssql-data.yaml  
kubectl apply -f .\Kubernetes\Infrastructure\SqlServer\base\secret-mssql-sapassword.yaml
kubectl apply -f .\Kubernetes\Infrastructure\SqlServer\base\deployment-mssql.yaml       
kubectl apply -f .\Kubernetes\Infrastructure\SqlServer\base\service-mssql.yaml

# RabbitMQ
kubectl apply -f .\Kubernetes\Infrastructure\RabbitMq\base\deployment-rabbitmq.yaml
kubectl apply -f .\Kubernetes\Infrastructure\RabbitMq\base\service-rabbitmq.yaml   

# Lab.RateMyBeer.Checkins
kubectl apply -f .\Kubernetes\Lab.RateMyBeer.Checkins\base\deployment-checkinsapi.yaml
kubectl apply -f .\Kubernetes\Lab.RateMyBeer.Checkins\base\service-checkinsapi.yaml   

# Lab.RateMyBeer.Frontend.Api
kubectl apply -f .\Kubernetes\Lab.RateMyBeer.Frontend.Api\base\deployment-frontendapi.yaml
kubectl apply -f .\Kubernetes\Lab.RateMyBeer.Frontend.Api\base\service-frontendapi.yaml   
kubectl apply -f .\Kubernetes\Lab.RateMyBeer.Frontend.Api\base\ingress-frontendapi.yaml   

# Lab.RateMyBeer.Frontend
kubectl apply -f .\Kubernetes\Lab.RateMyBeer.Frontend\base\deployment-frontend.yaml
kubectl apply -f .\Kubernetes\Lab.RateMyBeer.Frontend\base\service-frontend.yaml   
kubectl apply -f .\Kubernetes\Lab.RateMyBeer.Frontend\base\ingress-frontend.yaml

# Kustomize - umschalten auf https
## Lab.RateMyBeer.Frontend
### Vorschau
#> kubectl kustomize .\Kubernetes\Lab.RateMyBeer.Frontend\overlays\https
### Anwenden
#> kubectl apply -k .\Kubernetes\Lab.RateMyBeer.Frontend\overlays\https

## Lab.RateMyBeer.Frontend.Api
### Vorschau
#> kubectl kustomize .\Kubernetes\Lab.RateMyBeer.Frontend.Api\overlays\https
### Anwenden
#> kubectl apply -k .\Kubernetes\Lab.RateMyBeer.Frontend.Api\overlays\https